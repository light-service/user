// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error)
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*UserInfo, error)
	ModifyUserInfo(ctx context.Context, in *ModifyUserInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ModifyPassword(ctx context.Context, in *ModifyPasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

var userServiceRegisterStreamDesc = &grpc.StreamDesc{
	StreamName: "Register",
}

func (c *userServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/light.services.user.v1.UserService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var userServiceLoginStreamDesc = &grpc.StreamDesc{
	StreamName: "Login",
}

func (c *userServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/light.services.user.v1.UserService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var userServiceAuthenticateStreamDesc = &grpc.StreamDesc{
	StreamName: "Authenticate",
}

func (c *userServiceClient) Authenticate(ctx context.Context, in *AuthenticateRequest, opts ...grpc.CallOption) (*AuthenticateResponse, error) {
	out := new(AuthenticateResponse)
	err := c.cc.Invoke(ctx, "/light.services.user.v1.UserService/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var userServiceGetUserInfoStreamDesc = &grpc.StreamDesc{
	StreamName: "GetUserInfo",
}

func (c *userServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/light.services.user.v1.UserService/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var userServiceModifyUserInfoStreamDesc = &grpc.StreamDesc{
	StreamName: "ModifyUserInfo",
}

func (c *userServiceClient) ModifyUserInfo(ctx context.Context, in *ModifyUserInfoRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/light.services.user.v1.UserService/ModifyUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var userServiceModifyPasswordStreamDesc = &grpc.StreamDesc{
	StreamName: "ModifyPassword",
}

func (c *userServiceClient) ModifyPassword(ctx context.Context, in *ModifyPasswordRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/light.services.user.v1.UserService/ModifyPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceService is the service API for UserService service.
// Fields should be assigned to their respective handler implementations only before
// RegisterUserServiceService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type UserServiceService struct {
	Register       func(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login          func(context.Context, *LoginRequest) (*LoginResponse, error)
	Authenticate   func(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error)
	GetUserInfo    func(context.Context, *GetUserInfoRequest) (*UserInfo, error)
	ModifyUserInfo func(context.Context, *ModifyUserInfoRequest) (*empty.Empty, error)
	ModifyPassword func(context.Context, *ModifyPasswordRequest) (*empty.Empty, error)
}

func (s *UserServiceService) register(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/light.services.user.v1.UserService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *UserServiceService) login(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/light.services.user.v1.UserService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *UserServiceService) authenticate(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/light.services.user.v1.UserService/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Authenticate(ctx, req.(*AuthenticateRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *UserServiceService) getUserInfo(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/light.services.user.v1.UserService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *UserServiceService) modifyUserInfo(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.ModifyUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/light.services.user.v1.UserService/ModifyUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ModifyUserInfo(ctx, req.(*ModifyUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *UserServiceService) modifyPassword(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.ModifyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/light.services.user.v1.UserService/ModifyPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.ModifyPassword(ctx, req.(*ModifyPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterUserServiceService registers a service implementation with a gRPC server.
func RegisterUserServiceService(s grpc.ServiceRegistrar, srv *UserServiceService) {
	srvCopy := *srv
	if srvCopy.Register == nil {
		srvCopy.Register = func(context.Context, *RegisterRequest) (*RegisterResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
		}
	}
	if srvCopy.Login == nil {
		srvCopy.Login = func(context.Context, *LoginRequest) (*LoginResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
		}
	}
	if srvCopy.Authenticate == nil {
		srvCopy.Authenticate = func(context.Context, *AuthenticateRequest) (*AuthenticateResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
		}
	}
	if srvCopy.GetUserInfo == nil {
		srvCopy.GetUserInfo = func(context.Context, *GetUserInfoRequest) (*UserInfo, error) {
			return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
		}
	}
	if srvCopy.ModifyUserInfo == nil {
		srvCopy.ModifyUserInfo = func(context.Context, *ModifyUserInfoRequest) (*empty.Empty, error) {
			return nil, status.Errorf(codes.Unimplemented, "method ModifyUserInfo not implemented")
		}
	}
	if srvCopy.ModifyPassword == nil {
		srvCopy.ModifyPassword = func(context.Context, *ModifyPasswordRequest) (*empty.Empty, error) {
			return nil, status.Errorf(codes.Unimplemented, "method ModifyPassword not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "light.services.user.v1.UserService",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "Register",
				Handler:    srvCopy.register,
			},
			{
				MethodName: "Login",
				Handler:    srvCopy.login,
			},
			{
				MethodName: "Authenticate",
				Handler:    srvCopy.authenticate,
			},
			{
				MethodName: "GetUserInfo",
				Handler:    srvCopy.getUserInfo,
			},
			{
				MethodName: "ModifyUserInfo",
				Handler:    srvCopy.modifyUserInfo,
			},
			{
				MethodName: "ModifyPassword",
				Handler:    srvCopy.modifyPassword,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "user.proto",
	}

	s.RegisterService(&sd, nil)
}
